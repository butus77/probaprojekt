#!/usr/bin/env node
// scripts/generate-books.mjs
// Node 20+, ESM. Használat:
// node scripts/generate-books.mjs data/embeds.txt
// node scripts/generate-books.mjs data/embeds.txt --download

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function slugify(str) {
  return String(str)
    .toLowerCase()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // ékezetek le
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
    .replace(/--+/g, "-");
}

function uniqId(base, used) {
  let id = base || "konyv";
  if (!used.has(id)) { used.add(id); return id; }
  let i = 2;
  while (used.has(`${id}-${i}`)) i++;
  const out = `${id}-${i}`;
  used.add(out);
  return out;
}

// egyszerű kinyerés regex-szel
function extractOne(snippet) {
  const linkMatch = snippet.match(/<a[^>]+href="([^"]+)"/i);
  const imgSrcMatch = snippet.match(/<img[^>]+src="([^"]+)"/i);
  // cím prioritás: <img alt="...">, aztán <a> belső szövege
  const altMatch = snippet.match(/<img[^>]+alt="([^"]*)"/i);
  let title = altMatch?.[1]?.trim();
  if (!title) {
    const anchorTextMatch = snippet.match(/<div[^>]*font-size:21px[^>]*>[\s\S]*?<a[^>]*>([\s\S]*?)<\/a>/i) // BookCreator mintából
      || snippet.match(/<a[^>]*>([\s\S]*?)<\/a>/i);
    title = anchorTextMatch?.[1]?.replace(/\s+/g, " ").trim();
  }
  const link = linkMatch?.[1]?.trim();
  const cover = imgSrcMatch?.[1]?.trim();
  if (!link || !cover || !title) return null;
  return { title, link, cover };
}

async function downloadCover(url, destAbs) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Cover download failed: ${res.status} ${url}`);
  const buf = Buffer.from(await res.arrayBuffer());
  fs.mkdirSync(path.dirname(destAbs), { recursive: true });
  fs.writeFileSync(destAbs, buf);
}

function booksTs(books) {
  const header = `// AUTO-GENERATED by scripts/generate-books.mjs
// Forrás: Book Creator embed snippetek
export type Book = {
  id: string;
  title: string;
  year?: number;
  excerpt?: string;
  cover: string;
  link: string;
  grade?: string;
  subject?: string;
  tags?: string[];
  pages?: number;
  language?: string;
  format?: string;
};

export const books: Book[] = [
`;
  const body = books.map(b => {
    const esc = s => s.replace(/\\/g, "\\\\").replace(/`/g, "\\`");
    return `  {
    id: "${b.id}",
    title: "${esc(b.title)}",
    // year: 2024,
    // excerpt: "",
    cover: "${b.cover}",
    link: "${b.link}",
    subject: "Hitoktatás",
    tags: ["ebook","hitoktatás"],
    language: "hu",
    format: "Online",
  }`;
  }).join(",\n");
  const footer = `\n];\n`;
  return header + body + footer;
}

async function main() {
  const [, , inputPath, ...flags] = process.argv;
  if (!inputPath) {
    console.error("Usage: node scripts/generate-books.mjs <embeds.txt> [--download]");
    process.exit(1);
  }
  const wantDownload = flags.includes("--download");

  const abs = path.isAbsolute(inputPath)
    ? inputPath
    : path.join(process.cwd(), inputPath);
  if (!fs.existsSync(abs)) {
    console.error(`Input not found: ${abs}`);
    process.exit(1);
  }
  const raw = fs.readFileSync(abs, "utf8");

  // split próbálkozás: üres sorok mentén, vagy </div></div></div> után
  const chunks = raw
    .split(/<\/div>\s*<\/div>\s*<\/div>\s*/i)
    .map(s => s.trim())
    .filter(Boolean);

  const used = new Set();
  const books = [];
  for (const chunk of chunks) {
    const data = extractOne(chunk);
    if (!data) continue;
    const idBase = slugify(data.title);
    const id = uniqId(idBase, used);

    let coverPath = data.cover;
    if (wantDownload) {
      const ext = ".webp"; // BookCreator cover/share tipikusan webp
      const rel = `public/references/${id}${ext}`;
      const absCover = path.join(process.cwd(), rel);
      try {
        await downloadCover(data.cover, absCover);
        coverPath = `/references/${id}${ext}`;
      } catch (e) {
        console.warn(`⚠️  Borító letöltés sikertelen (${data.title}): ${e.message}. Külső URL marad.`);
      }
    }

    books.push({
      id,
      title: data.title,
      link: data.link,
      cover: coverPath,
    });
  }

  if (!books.length) {
    console.error("No books extracted. Check your embeds.txt content.");
    process.exit(1);
  }

  const outPath = path.join(process.cwd(), "lib", "books.ts");
  fs.mkdirSync(path.dirname(outPath), { recursive: true });
  fs.writeFileSync(outPath, booksTs(books), "utf8");

  console.log(`✅ Generated ${books.length} books → lib/books.ts`);
  if (wantDownload) console.log(`✅ Covers saved under public/references/`);
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
